#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdoNetLinqPract
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BarberShop")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertArchive(Archive instance);
    partial void UpdateArchive(Archive instance);
    partial void DeleteArchive(Archive instance);
    partial void InsertVisitArchive(VisitArchive instance);
    partial void UpdateVisitArchive(VisitArchive instance);
    partial void DeleteVisitArchive(VisitArchive instance);
    partial void InsertServices(Services instance);
    partial void UpdateServices(Services instance);
    partial void DeleteServices(Services instance);
    partial void InsertRegisters(Registers instance);
    partial void UpdateRegisters(Registers instance);
    partial void DeleteRegisters(Registers instance);
    partial void InsertPositions(Positions instance);
    partial void UpdatePositions(Positions instance);
    partial void DeletePositions(Positions instance);
    partial void InsertClients(Clients instance);
    partial void UpdateClients(Clients instance);
    partial void DeleteClients(Clients instance);
    partial void InsertFeedbacks(Feedbacks instance);
    partial void UpdateFeedbacks(Feedbacks instance);
    partial void DeleteFeedbacks(Feedbacks instance);
    partial void InsertBarbers(Barbers instance);
    partial void UpdateBarbers(Barbers instance);
    partial void DeleteBarbers(Barbers instance);
    partial void InsertBarbersServices(BarbersServices instance);
    partial void UpdateBarbersServices(BarbersServices instance);
    partial void DeleteBarbersServices(BarbersServices instance);
    partial void InsertSchedules(Schedules instance);
    partial void UpdateSchedules(Schedules instance);
    partial void DeleteSchedules(Schedules instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::AdoNetLinqPract.Properties.Settings.Default.BarberShopConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Archive> Archive
		{
			get
			{
				return this.GetTable<Archive>();
			}
		}
		
		public System.Data.Linq.Table<VisitArchive> VisitArchive
		{
			get
			{
				return this.GetTable<VisitArchive>();
			}
		}
		
		public System.Data.Linq.Table<Services> Services
		{
			get
			{
				return this.GetTable<Services>();
			}
		}
		
		public System.Data.Linq.Table<Registers> Registers
		{
			get
			{
				return this.GetTable<Registers>();
			}
		}
		
		public System.Data.Linq.Table<Positions> Positions
		{
			get
			{
				return this.GetTable<Positions>();
			}
		}
		
		public System.Data.Linq.Table<Clients> Clients
		{
			get
			{
				return this.GetTable<Clients>();
			}
		}
		
		public System.Data.Linq.Table<Feedbacks> Feedbacks
		{
			get
			{
				return this.GetTable<Feedbacks>();
			}
		}
		
		public System.Data.Linq.Table<Barbers> Barbers
		{
			get
			{
				return this.GetTable<Barbers>();
			}
		}
		
		public System.Data.Linq.Table<BarbersServices> BarbersServices
		{
			get
			{
				return this.GetTable<BarbersServices>();
			}
		}
		
		public System.Data.Linq.Table<Schedules> Schedules
		{
			get
			{
				return this.GetTable<Schedules>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Archive")]
	public partial class Archive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _BarberId;
		
		private System.Nullable<int> _ClientId;
		
		private System.TimeSpan _StartTime;
		
		private System.TimeSpan _EndTime;
		
		private EntityRef<Clients> _Clients;
		
		private EntityRef<Barbers> _Barbers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnBarberIdChanging(System.Nullable<int> value);
    partial void OnBarberIdChanged();
    partial void OnClientIdChanging(System.Nullable<int> value);
    partial void OnClientIdChanged();
    partial void OnStartTimeChanging(System.TimeSpan value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.TimeSpan value);
    partial void OnEndTimeChanged();
    #endregion
		
		public Archive()
		{
			this._Clients = default(EntityRef<Clients>);
			this._Barbers = default(EntityRef<Barbers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarberId", DbType="Int")]
		public System.Nullable<int> BarberId
		{
			get
			{
				return this._BarberId;
			}
			set
			{
				if ((this._BarberId != value))
				{
					if (this._Barbers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBarberIdChanging(value);
					this.SendPropertyChanging();
					this._BarberId = value;
					this.SendPropertyChanged("BarberId");
					this.OnBarberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int")]
		public System.Nullable<int> ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Clients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time NOT NULL")]
		public System.TimeSpan StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Time NOT NULL")]
		public System.TimeSpan EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Archive", Storage="_Clients", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public Clients Clients
		{
			get
			{
				return this._Clients.Entity;
			}
			set
			{
				Clients previousValue = this._Clients.Entity;
				if (((previousValue != value) 
							|| (this._Clients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clients.Entity = null;
						previousValue.Archive.Remove(this);
					}
					this._Clients.Entity = value;
					if ((value != null))
					{
						value.Archive.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Clients");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barbers_Archive", Storage="_Barbers", ThisKey="BarberId", OtherKey="Id", IsForeignKey=true)]
		public Barbers Barbers
		{
			get
			{
				return this._Barbers.Entity;
			}
			set
			{
				Barbers previousValue = this._Barbers.Entity;
				if (((previousValue != value) 
							|| (this._Barbers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Barbers.Entity = null;
						previousValue.Archive.Remove(this);
					}
					this._Barbers.Entity = value;
					if ((value != null))
					{
						value.Archive.Add(this);
						this._BarberId = value.Id;
					}
					else
					{
						this._BarberId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Barbers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VisitArchive")]
	public partial class VisitArchive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClientId;
		
		private int _BarberId;
		
		private int _ServiceId;
		
		private System.DateTime _Date;
		
		private decimal _TotalPrice;
		
		private int _FeedbackId;
		
		private EntityRef<Services> _Services;
		
		private EntityRef<Clients> _Clients;
		
		private EntityRef<Feedbacks> _Feedbacks;
		
		private EntityRef<Barbers> _Barbers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnBarberIdChanging(int value);
    partial void OnBarberIdChanged();
    partial void OnServiceIdChanging(int value);
    partial void OnServiceIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTotalPriceChanging(decimal value);
    partial void OnTotalPriceChanged();
    partial void OnFeedbackIdChanging(int value);
    partial void OnFeedbackIdChanged();
    #endregion
		
		public VisitArchive()
		{
			this._Services = default(EntityRef<Services>);
			this._Clients = default(EntityRef<Clients>);
			this._Feedbacks = default(EntityRef<Feedbacks>);
			this._Barbers = default(EntityRef<Barbers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Clients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarberId", DbType="Int NOT NULL")]
		public int BarberId
		{
			get
			{
				return this._BarberId;
			}
			set
			{
				if ((this._BarberId != value))
				{
					if (this._Barbers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBarberIdChanging(value);
					this.SendPropertyChanging();
					this._BarberId = value;
					this.SendPropertyChanged("BarberId");
					this.OnBarberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", DbType="Int NOT NULL")]
		public int ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._Services.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Money NOT NULL")]
		public decimal TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedbackId", DbType="Int NOT NULL")]
		public int FeedbackId
		{
			get
			{
				return this._FeedbackId;
			}
			set
			{
				if ((this._FeedbackId != value))
				{
					if (this._Feedbacks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedbackIdChanging(value);
					this.SendPropertyChanging();
					this._FeedbackId = value;
					this.SendPropertyChanged("FeedbackId");
					this.OnFeedbackIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Services_VisitArchive", Storage="_Services", ThisKey="ServiceId", OtherKey="Id", IsForeignKey=true)]
		public Services Services
		{
			get
			{
				return this._Services.Entity;
			}
			set
			{
				Services previousValue = this._Services.Entity;
				if (((previousValue != value) 
							|| (this._Services.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Services.Entity = null;
						previousValue.VisitArchive.Remove(this);
					}
					this._Services.Entity = value;
					if ((value != null))
					{
						value.VisitArchive.Add(this);
						this._ServiceId = value.Id;
					}
					else
					{
						this._ServiceId = default(int);
					}
					this.SendPropertyChanged("Services");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_VisitArchive", Storage="_Clients", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public Clients Clients
		{
			get
			{
				return this._Clients.Entity;
			}
			set
			{
				Clients previousValue = this._Clients.Entity;
				if (((previousValue != value) 
							|| (this._Clients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clients.Entity = null;
						previousValue.VisitArchive.Remove(this);
					}
					this._Clients.Entity = value;
					if ((value != null))
					{
						value.VisitArchive.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("Clients");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feedbacks_VisitArchive", Storage="_Feedbacks", ThisKey="FeedbackId", OtherKey="Id", IsForeignKey=true)]
		public Feedbacks Feedbacks
		{
			get
			{
				return this._Feedbacks.Entity;
			}
			set
			{
				Feedbacks previousValue = this._Feedbacks.Entity;
				if (((previousValue != value) 
							|| (this._Feedbacks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Feedbacks.Entity = null;
						previousValue.VisitArchive.Remove(this);
					}
					this._Feedbacks.Entity = value;
					if ((value != null))
					{
						value.VisitArchive.Add(this);
						this._FeedbackId = value.Id;
					}
					else
					{
						this._FeedbackId = default(int);
					}
					this.SendPropertyChanged("Feedbacks");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barbers_VisitArchive", Storage="_Barbers", ThisKey="BarberId", OtherKey="Id", IsForeignKey=true)]
		public Barbers Barbers
		{
			get
			{
				return this._Barbers.Entity;
			}
			set
			{
				Barbers previousValue = this._Barbers.Entity;
				if (((previousValue != value) 
							|| (this._Barbers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Barbers.Entity = null;
						previousValue.VisitArchive.Remove(this);
					}
					this._Barbers.Entity = value;
					if ((value != null))
					{
						value.VisitArchive.Add(this);
						this._BarberId = value.Id;
					}
					else
					{
						this._BarberId = default(int);
					}
					this.SendPropertyChanged("Barbers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Services")]
	public partial class Services : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private decimal _Price;
		
		private System.TimeSpan _Duration;
		
		private EntitySet<VisitArchive> _VisitArchive;
		
		private EntitySet<BarbersServices> _BarbersServices;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnDurationChanging(System.TimeSpan value);
    partial void OnDurationChanged();
    #endregion
		
		public Services()
		{
			this._VisitArchive = new EntitySet<VisitArchive>(new Action<VisitArchive>(this.attach_VisitArchive), new Action<VisitArchive>(this.detach_VisitArchive));
			this._BarbersServices = new EntitySet<BarbersServices>(new Action<BarbersServices>(this.attach_BarbersServices), new Action<BarbersServices>(this.detach_BarbersServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Time NOT NULL")]
		public System.TimeSpan Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Services_VisitArchive", Storage="_VisitArchive", ThisKey="Id", OtherKey="ServiceId")]
		public EntitySet<VisitArchive> VisitArchive
		{
			get
			{
				return this._VisitArchive;
			}
			set
			{
				this._VisitArchive.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Services_BarbersServices", Storage="_BarbersServices", ThisKey="Id", OtherKey="ServiceId")]
		public EntitySet<BarbersServices> BarbersServices
		{
			get
			{
				return this._BarbersServices;
			}
			set
			{
				this._BarbersServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VisitArchive(VisitArchive entity)
		{
			this.SendPropertyChanging();
			entity.Services = this;
		}
		
		private void detach_VisitArchive(VisitArchive entity)
		{
			this.SendPropertyChanging();
			entity.Services = null;
		}
		
		private void attach_BarbersServices(BarbersServices entity)
		{
			this.SendPropertyChanging();
			entity.Services = this;
		}
		
		private void detach_BarbersServices(BarbersServices entity)
		{
			this.SendPropertyChanging();
			entity.Services = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registers")]
	public partial class Registers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ScheduleId;
		
		private int _ClientId;
		
		private System.TimeSpan _Time;
		
		private EntityRef<Clients> _Clients;
		
		private EntityRef<Schedules> _Schedules;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnScheduleIdChanging(int value);
    partial void OnScheduleIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    partial void OnTimeChanging(System.TimeSpan value);
    partial void OnTimeChanged();
    #endregion
		
		public Registers()
		{
			this._Clients = default(EntityRef<Clients>);
			this._Schedules = default(EntityRef<Schedules>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleId", DbType="Int NOT NULL")]
		public int ScheduleId
		{
			get
			{
				return this._ScheduleId;
			}
			set
			{
				if ((this._ScheduleId != value))
				{
					if (this._Schedules.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._ScheduleId = value;
					this.SendPropertyChanged("ScheduleId");
					this.OnScheduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Clients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Time NOT NULL")]
		public System.TimeSpan Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Registers", Storage="_Clients", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public Clients Clients
		{
			get
			{
				return this._Clients.Entity;
			}
			set
			{
				Clients previousValue = this._Clients.Entity;
				if (((previousValue != value) 
							|| (this._Clients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clients.Entity = null;
						previousValue.Registers.Remove(this);
					}
					this._Clients.Entity = value;
					if ((value != null))
					{
						value.Registers.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("Clients");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedules_Registers", Storage="_Schedules", ThisKey="ScheduleId", OtherKey="Id", IsForeignKey=true)]
		public Schedules Schedules
		{
			get
			{
				return this._Schedules.Entity;
			}
			set
			{
				Schedules previousValue = this._Schedules.Entity;
				if (((previousValue != value) 
							|| (this._Schedules.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedules.Entity = null;
						previousValue.Registers.Remove(this);
					}
					this._Schedules.Entity = value;
					if ((value != null))
					{
						value.Registers.Add(this);
						this._ScheduleId = value.Id;
					}
					else
					{
						this._ScheduleId = default(int);
					}
					this.SendPropertyChanged("Schedules");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Positions")]
	public partial class Positions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Barbers> _Barbers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Positions()
		{
			this._Barbers = new EntitySet<Barbers>(new Action<Barbers>(this.attach_Barbers), new Action<Barbers>(this.detach_Barbers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Positions_Barbers", Storage="_Barbers", ThisKey="Id", OtherKey="PositionId")]
		public EntitySet<Barbers> Barbers
		{
			get
			{
				return this._Barbers;
			}
			set
			{
				this._Barbers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Barbers(Barbers entity)
		{
			this.SendPropertyChanging();
			entity.Positions = this;
		}
		
		private void detach_Barbers(Barbers entity)
		{
			this.SendPropertyChanging();
			entity.Positions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Clients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Phone;
		
		private string _Email;
		
		private EntitySet<Archive> _Archive;
		
		private EntitySet<VisitArchive> _VisitArchive;
		
		private EntitySet<Registers> _Registers;
		
		private EntitySet<Feedbacks> _Feedbacks;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Clients()
		{
			this._Archive = new EntitySet<Archive>(new Action<Archive>(this.attach_Archive), new Action<Archive>(this.detach_Archive));
			this._VisitArchive = new EntitySet<VisitArchive>(new Action<VisitArchive>(this.attach_VisitArchive), new Action<VisitArchive>(this.detach_VisitArchive));
			this._Registers = new EntitySet<Registers>(new Action<Registers>(this.attach_Registers), new Action<Registers>(this.detach_Registers));
			this._Feedbacks = new EntitySet<Feedbacks>(new Action<Feedbacks>(this.attach_Feedbacks), new Action<Feedbacks>(this.detach_Feedbacks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Archive", Storage="_Archive", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<Archive> Archive
		{
			get
			{
				return this._Archive;
			}
			set
			{
				this._Archive.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_VisitArchive", Storage="_VisitArchive", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<VisitArchive> VisitArchive
		{
			get
			{
				return this._VisitArchive;
			}
			set
			{
				this._VisitArchive.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Registers", Storage="_Registers", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<Registers> Registers
		{
			get
			{
				return this._Registers;
			}
			set
			{
				this._Registers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Feedbacks", Storage="_Feedbacks", ThisKey="Id", OtherKey="ClientId")]
		public EntitySet<Feedbacks> Feedbacks
		{
			get
			{
				return this._Feedbacks;
			}
			set
			{
				this._Feedbacks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Archive(Archive entity)
		{
			this.SendPropertyChanging();
			entity.Clients = this;
		}
		
		private void detach_Archive(Archive entity)
		{
			this.SendPropertyChanging();
			entity.Clients = null;
		}
		
		private void attach_VisitArchive(VisitArchive entity)
		{
			this.SendPropertyChanging();
			entity.Clients = this;
		}
		
		private void detach_VisitArchive(VisitArchive entity)
		{
			this.SendPropertyChanging();
			entity.Clients = null;
		}
		
		private void attach_Registers(Registers entity)
		{
			this.SendPropertyChanging();
			entity.Clients = this;
		}
		
		private void detach_Registers(Registers entity)
		{
			this.SendPropertyChanging();
			entity.Clients = null;
		}
		
		private void attach_Feedbacks(Feedbacks entity)
		{
			this.SendPropertyChanging();
			entity.Clients = this;
		}
		
		private void detach_Feedbacks(Feedbacks entity)
		{
			this.SendPropertyChanging();
			entity.Clients = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feedbacks")]
	public partial class Feedbacks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Review;
		
		private int _Mark;
		
		private int _BarberId;
		
		private int _ClientId;
		
		private EntitySet<VisitArchive> _VisitArchive;
		
		private EntityRef<Clients> _Clients;
		
		private EntityRef<Barbers> _Barbers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnReviewChanging(string value);
    partial void OnReviewChanged();
    partial void OnMarkChanging(int value);
    partial void OnMarkChanged();
    partial void OnBarberIdChanging(int value);
    partial void OnBarberIdChanged();
    partial void OnClientIdChanging(int value);
    partial void OnClientIdChanged();
    #endregion
		
		public Feedbacks()
		{
			this._VisitArchive = new EntitySet<VisitArchive>(new Action<VisitArchive>(this.attach_VisitArchive), new Action<VisitArchive>(this.detach_VisitArchive));
			this._Clients = default(EntityRef<Clients>);
			this._Barbers = default(EntityRef<Barbers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Review", DbType="NVarChar(MAX)")]
		public string Review
		{
			get
			{
				return this._Review;
			}
			set
			{
				if ((this._Review != value))
				{
					this.OnReviewChanging(value);
					this.SendPropertyChanging();
					this._Review = value;
					this.SendPropertyChanged("Review");
					this.OnReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="Int NOT NULL")]
		public int Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarberId", DbType="Int NOT NULL")]
		public int BarberId
		{
			get
			{
				return this._BarberId;
			}
			set
			{
				if ((this._BarberId != value))
				{
					if (this._Barbers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBarberIdChanging(value);
					this.SendPropertyChanging();
					this._BarberId = value;
					this.SendPropertyChanged("BarberId");
					this.OnBarberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int NOT NULL")]
		public int ClientId
		{
			get
			{
				return this._ClientId;
			}
			set
			{
				if ((this._ClientId != value))
				{
					if (this._Clients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIdChanging(value);
					this.SendPropertyChanging();
					this._ClientId = value;
					this.SendPropertyChanged("ClientId");
					this.OnClientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Feedbacks_VisitArchive", Storage="_VisitArchive", ThisKey="Id", OtherKey="FeedbackId")]
		public EntitySet<VisitArchive> VisitArchive
		{
			get
			{
				return this._VisitArchive;
			}
			set
			{
				this._VisitArchive.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clients_Feedbacks", Storage="_Clients", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
		public Clients Clients
		{
			get
			{
				return this._Clients.Entity;
			}
			set
			{
				Clients previousValue = this._Clients.Entity;
				if (((previousValue != value) 
							|| (this._Clients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clients.Entity = null;
						previousValue.Feedbacks.Remove(this);
					}
					this._Clients.Entity = value;
					if ((value != null))
					{
						value.Feedbacks.Add(this);
						this._ClientId = value.Id;
					}
					else
					{
						this._ClientId = default(int);
					}
					this.SendPropertyChanged("Clients");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barbers_Feedbacks", Storage="_Barbers", ThisKey="BarberId", OtherKey="Id", IsForeignKey=true)]
		public Barbers Barbers
		{
			get
			{
				return this._Barbers.Entity;
			}
			set
			{
				Barbers previousValue = this._Barbers.Entity;
				if (((previousValue != value) 
							|| (this._Barbers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Barbers.Entity = null;
						previousValue.Feedbacks.Remove(this);
					}
					this._Barbers.Entity = value;
					if ((value != null))
					{
						value.Feedbacks.Add(this);
						this._BarberId = value.Id;
					}
					else
					{
						this._BarberId = default(int);
					}
					this.SendPropertyChanged("Barbers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VisitArchive(VisitArchive entity)
		{
			this.SendPropertyChanging();
			entity.Feedbacks = this;
		}
		
		private void detach_VisitArchive(VisitArchive entity)
		{
			this.SendPropertyChanging();
			entity.Feedbacks = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Barbers")]
	public partial class Barbers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Gender;
		
		private string _Phone;
		
		private string _Email;
		
		private System.DateTime _BirthDate;
		
		private System.DateTime _HireDate;
		
		private int _PositionId;
		
		private EntitySet<Archive> _Archive;
		
		private EntitySet<VisitArchive> _VisitArchive;
		
		private EntitySet<Feedbacks> _Feedbacks;
		
		private EntitySet<BarbersServices> _BarbersServices;
		
		private EntitySet<Schedules> _Schedules;
		
		private EntityRef<Positions> _Positions;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnHireDateChanging(System.DateTime value);
    partial void OnHireDateChanged();
    partial void OnPositionIdChanging(int value);
    partial void OnPositionIdChanged();
    #endregion
		
		public Barbers()
		{
			this._Archive = new EntitySet<Archive>(new Action<Archive>(this.attach_Archive), new Action<Archive>(this.detach_Archive));
			this._VisitArchive = new EntitySet<VisitArchive>(new Action<VisitArchive>(this.attach_VisitArchive), new Action<VisitArchive>(this.detach_VisitArchive));
			this._Feedbacks = new EntitySet<Feedbacks>(new Action<Feedbacks>(this.attach_Feedbacks), new Action<Feedbacks>(this.detach_Feedbacks));
			this._BarbersServices = new EntitySet<BarbersServices>(new Action<BarbersServices>(this.attach_BarbersServices), new Action<BarbersServices>(this.detach_BarbersServices));
			this._Schedules = new EntitySet<Schedules>(new Action<Schedules>(this.attach_Schedules), new Action<Schedules>(this.detach_Schedules));
			this._Positions = default(EntityRef<Positions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HireDate", DbType="Date NOT NULL")]
		public System.DateTime HireDate
		{
			get
			{
				return this._HireDate;
			}
			set
			{
				if ((this._HireDate != value))
				{
					this.OnHireDateChanging(value);
					this.SendPropertyChanging();
					this._HireDate = value;
					this.SendPropertyChanged("HireDate");
					this.OnHireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionId", DbType="Int NOT NULL")]
		public int PositionId
		{
			get
			{
				return this._PositionId;
			}
			set
			{
				if ((this._PositionId != value))
				{
					if (this._Positions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionIdChanging(value);
					this.SendPropertyChanging();
					this._PositionId = value;
					this.SendPropertyChanged("PositionId");
					this.OnPositionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barbers_Archive", Storage="_Archive", ThisKey="Id", OtherKey="BarberId")]
		public EntitySet<Archive> Archive
		{
			get
			{
				return this._Archive;
			}
			set
			{
				this._Archive.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barbers_VisitArchive", Storage="_VisitArchive", ThisKey="Id", OtherKey="BarberId")]
		public EntitySet<VisitArchive> VisitArchive
		{
			get
			{
				return this._VisitArchive;
			}
			set
			{
				this._VisitArchive.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barbers_Feedbacks", Storage="_Feedbacks", ThisKey="Id", OtherKey="BarberId")]
		public EntitySet<Feedbacks> Feedbacks
		{
			get
			{
				return this._Feedbacks;
			}
			set
			{
				this._Feedbacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barbers_BarbersServices", Storage="_BarbersServices", ThisKey="Id", OtherKey="BarberId")]
		public EntitySet<BarbersServices> BarbersServices
		{
			get
			{
				return this._BarbersServices;
			}
			set
			{
				this._BarbersServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barbers_Schedules", Storage="_Schedules", ThisKey="Id", OtherKey="BarberId")]
		public EntitySet<Schedules> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Positions_Barbers", Storage="_Positions", ThisKey="PositionId", OtherKey="Id", IsForeignKey=true)]
		public Positions Positions
		{
			get
			{
				return this._Positions.Entity;
			}
			set
			{
				Positions previousValue = this._Positions.Entity;
				if (((previousValue != value) 
							|| (this._Positions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Positions.Entity = null;
						previousValue.Barbers.Remove(this);
					}
					this._Positions.Entity = value;
					if ((value != null))
					{
						value.Barbers.Add(this);
						this._PositionId = value.Id;
					}
					else
					{
						this._PositionId = default(int);
					}
					this.SendPropertyChanged("Positions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Archive(Archive entity)
		{
			this.SendPropertyChanging();
			entity.Barbers = this;
		}
		
		private void detach_Archive(Archive entity)
		{
			this.SendPropertyChanging();
			entity.Barbers = null;
		}
		
		private void attach_VisitArchive(VisitArchive entity)
		{
			this.SendPropertyChanging();
			entity.Barbers = this;
		}
		
		private void detach_VisitArchive(VisitArchive entity)
		{
			this.SendPropertyChanging();
			entity.Barbers = null;
		}
		
		private void attach_Feedbacks(Feedbacks entity)
		{
			this.SendPropertyChanging();
			entity.Barbers = this;
		}
		
		private void detach_Feedbacks(Feedbacks entity)
		{
			this.SendPropertyChanging();
			entity.Barbers = null;
		}
		
		private void attach_BarbersServices(BarbersServices entity)
		{
			this.SendPropertyChanging();
			entity.Barbers = this;
		}
		
		private void detach_BarbersServices(BarbersServices entity)
		{
			this.SendPropertyChanging();
			entity.Barbers = null;
		}
		
		private void attach_Schedules(Schedules entity)
		{
			this.SendPropertyChanging();
			entity.Barbers = this;
		}
		
		private void detach_Schedules(Schedules entity)
		{
			this.SendPropertyChanging();
			entity.Barbers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BarbersServices")]
	public partial class BarbersServices : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BarberId;
		
		private int _ServiceId;
		
		private EntityRef<Barbers> _Barbers;
		
		private EntityRef<Services> _Services;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBarberIdChanging(int value);
    partial void OnBarberIdChanged();
    partial void OnServiceIdChanging(int value);
    partial void OnServiceIdChanged();
    #endregion
		
		public BarbersServices()
		{
			this._Barbers = default(EntityRef<Barbers>);
			this._Services = default(EntityRef<Services>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarberId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BarberId
		{
			get
			{
				return this._BarberId;
			}
			set
			{
				if ((this._BarberId != value))
				{
					if (this._Barbers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBarberIdChanging(value);
					this.SendPropertyChanging();
					this._BarberId = value;
					this.SendPropertyChanged("BarberId");
					this.OnBarberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					if (this._Services.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barbers_BarbersServices", Storage="_Barbers", ThisKey="BarberId", OtherKey="Id", IsForeignKey=true)]
		public Barbers Barbers
		{
			get
			{
				return this._Barbers.Entity;
			}
			set
			{
				Barbers previousValue = this._Barbers.Entity;
				if (((previousValue != value) 
							|| (this._Barbers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Barbers.Entity = null;
						previousValue.BarbersServices.Remove(this);
					}
					this._Barbers.Entity = value;
					if ((value != null))
					{
						value.BarbersServices.Add(this);
						this._BarberId = value.Id;
					}
					else
					{
						this._BarberId = default(int);
					}
					this.SendPropertyChanged("Barbers");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Services_BarbersServices", Storage="_Services", ThisKey="ServiceId", OtherKey="Id", IsForeignKey=true)]
		public Services Services
		{
			get
			{
				return this._Services.Entity;
			}
			set
			{
				Services previousValue = this._Services.Entity;
				if (((previousValue != value) 
							|| (this._Services.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Services.Entity = null;
						previousValue.BarbersServices.Remove(this);
					}
					this._Services.Entity = value;
					if ((value != null))
					{
						value.BarbersServices.Add(this);
						this._ServiceId = value.Id;
					}
					else
					{
						this._ServiceId = default(int);
					}
					this.SendPropertyChanged("Services");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedules")]
	public partial class Schedules : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _BarberId;
		
		private System.TimeSpan _StartTime;
		
		private System.TimeSpan _EndTime;
		
		private EntitySet<Registers> _Registers;
		
		private EntityRef<Barbers> _Barbers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnBarberIdChanging(System.Nullable<int> value);
    partial void OnBarberIdChanged();
    partial void OnStartTimeChanging(System.TimeSpan value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.TimeSpan value);
    partial void OnEndTimeChanged();
    #endregion
		
		public Schedules()
		{
			this._Registers = new EntitySet<Registers>(new Action<Registers>(this.attach_Registers), new Action<Registers>(this.detach_Registers));
			this._Barbers = default(EntityRef<Barbers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarberId", DbType="Int")]
		public System.Nullable<int> BarberId
		{
			get
			{
				return this._BarberId;
			}
			set
			{
				if ((this._BarberId != value))
				{
					if (this._Barbers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBarberIdChanging(value);
					this.SendPropertyChanging();
					this._BarberId = value;
					this.SendPropertyChanged("BarberId");
					this.OnBarberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time NOT NULL")]
		public System.TimeSpan StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Time NOT NULL")]
		public System.TimeSpan EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedules_Registers", Storage="_Registers", ThisKey="Id", OtherKey="ScheduleId")]
		public EntitySet<Registers> Registers
		{
			get
			{
				return this._Registers;
			}
			set
			{
				this._Registers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barbers_Schedules", Storage="_Barbers", ThisKey="BarberId", OtherKey="Id", IsForeignKey=true)]
		public Barbers Barbers
		{
			get
			{
				return this._Barbers.Entity;
			}
			set
			{
				Barbers previousValue = this._Barbers.Entity;
				if (((previousValue != value) 
							|| (this._Barbers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Barbers.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Barbers.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._BarberId = value.Id;
					}
					else
					{
						this._BarberId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Barbers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registers(Registers entity)
		{
			this.SendPropertyChanging();
			entity.Schedules = this;
		}
		
		private void detach_Registers(Registers entity)
		{
			this.SendPropertyChanging();
			entity.Schedules = null;
		}
	}
}
#pragma warning restore 1591
